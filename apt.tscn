[gd_scene load_steps=27 format=2]

[ext_resource path="res://assets/3d/world/apt.obj" type="ArrayMesh" id=1]
[ext_resource path="res://assets/door.jpeg" type="Texture" id=2]
[ext_resource path="res://assets/water.jpg" type="Texture" id=3]
[ext_resource path="res://Player.tscn" type="PackedScene" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type spatial; 
render_mode skip_vertex_transform, diffuse_lambert_wrap, specular_phong, vertex_lighting, depth_draw_alpha_prepass, cull_disabled;

uniform vec4 tint_color : hint_color = vec4(1.0);
uniform sampler2D albedoTex : hint_albedo;
uniform sampler2D dither : hint_albedo;
uniform float specular_intensity : hint_range(0, 1);
uniform float vertex_resolution = 256;
uniform float cull_distance = 9999;
uniform vec2 uv_scale = vec2(1.0, 1.0);
uniform vec2 uv_offset = vec2(.0, .0);
uniform vec2 uv_speed = vec2(0,-1);

uniform bool affine_texture_mapping = true;
uniform bool emissive = false;
uniform bool moving_uv = false;
uniform bool double_sided = false;

uniform bool stippled_transparent = false;

varying vec4 vertex_coordinates;

void vertex() {
	UV = UV * uv_scale + uv_offset + ((moving_uv)?uv_speed*TIME:vec2(0.0));
	
	float vertex_distance = length((MODELVIEW_MATRIX * vec4(VERTEX, 1.0)));
	
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;
	NORMAL = abs(vec4(NORMAL, 1.) * MODELVIEW_MATRIX).xyz;
	
	float vPos_w = (PROJECTION_MATRIX * vec4(VERTEX, 1.0)).w;
	VERTEX.xy = vPos_w * round(vertex_resolution * VERTEX.xy / vPos_w) / vertex_resolution;
	vertex_coordinates = vec4(UV * VERTEX.z, VERTEX.z, 0.0);
	
	if (vertex_distance > cull_distance)
		VERTEX = vec3(.0);
}

void fragment() {
	if (stippled_transparent && (mod(SCREEN_UV.x*VIEWPORT_SIZE.x+floor(mod(SCREEN_UV.y*VIEWPORT_SIZE.y, 2.0)), 2.0)<1.0)){
		discard;
	}
	
	vec4 tex;
	if (affine_texture_mapping){
		tex = texture(albedoTex, vertex_coordinates.xy / vertex_coordinates.z);
	} else {
		tex = texture(albedoTex, UV);
	}
	
	ALPHA_SCISSOR = 0.5;
	
	if (!double_sided && !FRONT_FACING){
		ALPHA = 0.0;
	} else {
		ALPHA = tex.a * tint_color.a * COLOR.a;
	}

	if (emissive){
		EMISSION = tex.rgb * tint_color.rgb * COLOR.rgb;
		ALBEDO = vec3(0.0);
	} else {
		ALBEDO = tex.rgb * tint_color.rgb * COLOR.rgb;
	}
	SPECULAR = specular_intensity;
	ROUGHNESS = 1.0;
	
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/tint_color = Color( 1, 1, 1, 1 )
shader_param/specular_intensity = 0.0
shader_param/vertex_resolution = 50.0
shader_param/cull_distance = 200.0
shader_param/uv_scale = Vector2( 1, 1 )
shader_param/uv_offset = Vector2( 0, 0 )
shader_param/uv_speed = Vector2( 0, -1 )
shader_param/affine_texture_mapping = true
shader_param/emissive = false
shader_param/moving_uv = false
shader_param/double_sided = true
shader_param/stippled_transparent = false

[sub_resource type="ConcavePolygonShape" id=3]
data = PoolVector3Array( -3, 2, 0.6667, 1, 2, 0.6673, -3, 2, 2, -3, 2, 2, 1, 2, 0.6673, 1, 2, 2.001, -3, 0, 3, -3, 2, 3, -3, 0, 5, -3, 0, 5, -3, 2, 3, -3, 2, 5, -3, 2, -0.6667, -3, 0, -0.6667, -3, 2, -2, -3, 2, -2, -3, 0, -0.6667, -3, 0, -2, 1, 0, 0.6673, -3, 0, 0.6667, 1, 0, 2.001, 1, 0, 2.001, -3, 0, 0.6667, -3, 0, 2, 1, 2, 0.6673, 1, 0, 0.6673, 1, 2, 2.001, 1, 2, 2.001, 1, 0, 0.6673, 1, 0, 2.001, -3, 2, -2, -3, 0, -2, -4, 2, -2, -4, 2, -2, -3, 0, -2, -4, 0, -2, -3, 2, -3, -3, 0, -3, 1, 2, -3, 1, 2, -3, -3, 0, -3, 1, 0, -3, -3, 0, -2, 1, 0, -2, -3, 0, -3, -3, 0, -3, 1, 0, -2, 1, 0, -3, 1, 2, -2, -3, 2, -2, 1, 2, -3, 1, 2, -3, -3, 2, -2, -3, 2, -3, 1, 2, -2, 1, 2, -3, 2, 2, -2, 2, 2, -2, 1, 2, -3, 2, 2, -3, 2, 0, -2, 2, 2, -2, 2, 0.1343, -2.1064, 2, 0.1343, -2.1064, 2, 2, -2, 2, 1.8657, -2.1064, 1, 0, -2, 1, 2, -2, 2, 0, -2, 2, 0, -2, 1, 2, -2, 2, 2, -2, 1, 2, -3, 1, 0, -3, 2, 2, -3, 2, 2, -3, 1, 0, -3, 2, 0, -3, 1, 0, -3, 1, 0, -2, 2, 0, -3, 2, 0, -3, 1, 0, -2, 2, 0, -2, -4, 0, -2, -4, 0, -3, -4, 0.1343, -2.1064, -4, 0.1343, -2.1064, -4, 0, -3, -4, 0.1343, -2.8936, -3, 2, -3, -3, 2, -2, -4, 2, -3, -4, 2, -3, -3, 2, -2, -4, 2, -2, -3, 0, -3, -3, 2, -3, -4, 0, -3, -4, 0, -3, -3, 2, -3, -4, 2, -3, -3, 0, -2, -3, 0, -3, -4, 0, -2, -4, 0, -2, -3, 0, -3, -4, 0, -3, -3, 2, 5, 1, 2, 5, -3, 2, 6, -3, 2, 6, 1, 2, 5, 1, 2, 6, 1, 0, 3.0005, -3, 0, 3, 1, 0, 5, 1, 0, 5, -3, 0, 3, -3, 0, 5, -3, 2, 3, 1, 2, 3.0005, -3, 2, 5, -3, 2, 5, 1, 2, 3.0005, 1, 2, 5, 1, 2, 6, 1, 0, 6, -3, 2, 6, -3, 2, 6, 1, 0, 6, -3, 0, 6, -3, 0, 5, -3, 2, 5, -3, 0, 6, -3, 0, 6, -3, 2, 5, -3, 2, 6, 1, 0, 5, -3, 0, 5, 1, 0, 6, 1, 0, 6, -3, 0, 5, -3, 0, 6, 1, 2, 5, 1, 0, 5, 1, 2, 6, 1, 2, 6, 1, 0, 5, 1, 0, 6, 4, 2, 3, 4, 0, 3, 4, 2, 5, 4, 2, 5, 4, 0, 3, 4, 0, 5, -4, 0, -3, -4, 2, -3, -4, 0.1343, -2.8936, -4, 0.1343, -2.8936, -4, 2, -3, -4, 1.8657, -2.8936, -3, 0, 2, -3, 2, 2, -3, 0, 3, -3, 0, 3, -3, 2, 2, -3, 2, 3, 2, 0, 5, 2, 2, 5, 4, 0, 5, 4, 0, 5, 2, 2, 5, 4, 2, 5, 2, 2, 2, 2, 0, 2, 4, 2, 2, 4, 2, 2, 2, 0, 2, 4, 0, 2, 4, 0, 3, 4, 2, 3, 4, 0, 2, 4, 0, 2, 4, 2, 3, 4, 2, 2, 1, 0, 5, 1, 2, 5, 2, 0, 5, 2, 0, 5, 1, 2, 5, 2, 2, 5, 1, 2, 2, 1, 0, 2, 2, 2, 2, 2, 2, 2, 1, 0, 2, 2, 0, 2, 2, 2, -2, 2, 2, -3, 2, 1.8657, -2.1064, 2, 1.8657, -2.1064, 2, 2, -3, 2, 1.8657, -2.8936, 2, 2, -3, 2, 0, -3, 2, 1.8657, -2.8936, 2, 1.8657, -2.8936, 2, 0, -3, 2, 0.1343, -2.8936, -4, 2, -3, -4, 2, -2, -4, 1.8657, -2.8936, -4, 1.8657, -2.8936, -4, 2, -2, -4, 1.8657, -2.1064, -4, 2, -2, -4, 0, -2, -4, 1.8657, -2.1064, -4, 1.8657, -2.1064, -4, 0, -2, -4, 0.1343, -2.1064, 2, 0, -3, 2, 0, -2, 2, 0.1343, -2.8936, 2, 0.1343, -2.8936, 2, 0, -2, 2, 0.1343, -2.1064, 1, 0, 2.001, -3, 0, 2, 1, 0, 3.0005, 1, 0, 3.0005, -3, 0, 2, -3, 0, 3, -3, 2, 2, 1, 2, 2.001, -3, 2, 3, -3, 2, 3, 1, 2, 2.001, 1, 2, 3.0005, 1, 2, -2, 1, 0, -2, 1, 2, -0.6663, 1, 2, -0.6663, 1, 0, -2, 1, 0, -0.6663, 1, 0, 0.6673, 1, 2, 0.6673, 2.4799, 0, 0.6673, 2.4799, 0, 0.6673, 1, 2, 0.6673, 2.4799, 2, 0.6673, 1, 0, -2, -3, 0, -2, 1, 0, -0.6663, 1, 0, -0.6663, -3, 0, -2, -3, 0, -0.6667, 1, 0, -0.6663, -3, 0, -0.6667, 1, 0, 0.6673, 1, 0, 0.6673, -3, 0, -0.6667, -3, 0, 0.6667, -3, 2, 2, -3, 0, 2, -3, 2, 0.6667, -3, 2, 0.6667, -3, 0, 2, -3, 0, 0.6667, -3, 2, 0.6667, -3, 0, 0.6667, -3, 2, -0.6667, -3, 2, -0.6667, -3, 0, 0.6667, -3, 0, -0.6667, -3, 2, -2, 1, 2, -2, -3, 2, -0.6667, -3, 2, -0.6667, 1, 2, -2, 1, 2, -0.6663, -3, 2, -0.6667, 1, 2, -0.6663, -3, 2, 0.6667, -3, 2, 0.6667, 1, 2, -0.6663, 1, 2, 0.6673, 2.4799, 2, -0.6663, 2.4799, 0, -0.6663, 2.4799, 2, 0.6673, 2.4799, 2, 0.6673, 2.4799, 0, -0.6663, 2.4799, 0, 0.6673, 1, 0, -0.6663, 1, 0, 0.6673, 2.4799, 0, -0.6663, 2.4799, 0, -0.6663, 1, 0, 0.6673, 2.4799, 0, 0.6673, 1, 2, 0.6673, 1, 2, -0.6663, 2.4799, 2, 0.6673, 2.4799, 2, 0.6673, 1, 2, -0.6663, 2.4799, 2, -0.6663, 1, 2, -0.6663, 1, 0, -0.6663, 2.4799, 2, -0.6663, 2.4799, 2, -0.6663, 1, 0, -0.6663, 2.4799, 0, -0.6663, 1, 0, 2.001, 1, 0, 3.0005, 2, 0, 2.001, 2, 0, 2.001, 1, 0, 3.0005, 2, 0, 3.0005, 2, 0, 2.001, 2, 0, 3.0005, 3, 0.6667, 2.001, 3, 0.6667, 2.001, 2, 0, 3.0005, 3, 0.6667, 3.0005, 3, 0.6667, 2.001, 3, 0.6667, 3.0005, 4, 0.6667, 2.001, 4, 0.6667, 2.001, 3, 0.6667, 3.0005, 4, 0.6667, 3.0005, 4, 0.6667, 3.0005, 3, 0.6667, 3.0005, 4, 1.3333, 4.0005, 4, 1.3333, 4.0005, 3, 0.6667, 3.0005, 3, 1.3333, 4.0005, 4, 1.3333, 4.0005, 3, 1.3333, 4.0005, 4, 1.3333, 5.0005, 4, 1.3333, 5.0005, 3, 1.3333, 4.0005, 3, 1.3333, 5.0005, 3, 1.3333, 5.0005, 3, 1.3333, 4.0005, 2, 2, 5.0005, 2, 2, 5.0005, 3, 1.3333, 4.0005, 2, 2, 4.0005, 2, 2, 5.0005, 2, 2, 4.0005, 1, 2, 5.0005, 1, 2, 5.0005, 2, 2, 4.0005, 1, 2, 4.0005, 1, 2, 4.0012, 1, 0, 4.0012, 1, 2, 3.0012, 1, 2, 3.0012, 1, 0, 4.0012, 1, 0, 3.0012, 1, 2, 3.0012, 1, 0, 3.0012, 3, 2, 3.0012, 3, 2, 3.0012, 1, 0, 3.0012, 3, 0, 3.0012, 3, 2, 3.0012, 3, 0, 3.0012, 3, 2, 4.0012, 3, 2, 4.0012, 3, 0, 3.0012, 3, 0, 4.0012, 3, 2, 4.0012, 3, 0, 4.0012, 1, 2, 4.0012, 1, 2, 4.0012, 3, 0, 4.0012, 1, 0, 4.0012, 3, 0, 3.0012, 1, 0, 3.0012, 3, 0, 4.0012, 3, 0, 4.0012, 1, 0, 3.0012, 1, 0, 4.0012, 1, 2, 3.0012, 3, 2, 3.0012, 1, 2, 4.0012, 1, 2, 4.0012, 3, 2, 3.0012, 3, 2, 4.0012 )

[sub_resource type="QuadMesh" id=4]

[sub_resource type="StreamTexture" id=5]
flags = 3
load_path = "res://.import/Xdoor.png-50f77e34368bd2554208a681b9273a65.s3tc.stex"

[sub_resource type="VisualShaderNodeTexture" id=6]
texture = SubResource( 5 )

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=8]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 2

[sub_resource type="VisualShader" id=9]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -611, 250 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( 20, 80 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( -480, 200 )
nodes/fragment/4/node = SubResource( 8 )
nodes/fragment/4/position = Vector2( -240, 200 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 4, 0 )

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )

[sub_resource type="BoxShape" id=11]
extents = Vector3( 0.49816, 0.557121, 0.0578317 )

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=13]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVectorOp" id=14]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.8, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=15]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.25, 0.02, 1 ) ]

[sub_resource type="VisualShader" id=16]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// VectorOp:4
	vec3 n_in4p1 = vec3(0.50000, 0.80000, 1.00000);
	vec3 n_out4p0 = n_out2p0 * n_in4p1;

// VectorOp:5
	vec3 n_in5p1 = vec3(0.25000, 0.02000, 1.00000);
	vec3 n_out5p0 = n_out4p0 + n_in5p1;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out5p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Output:0
	ALBEDO = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -611, 250 )
nodes/fragment/2/node = SubResource( 12 )
nodes/fragment/2/position = Vector2( -620, 280 )
nodes/fragment/3/node = SubResource( 13 )
nodes/fragment/3/position = Vector2( 40, 160 )
nodes/fragment/4/node = SubResource( 14 )
nodes/fragment/4/position = Vector2( -400, 260 )
nodes/fragment/5/node = SubResource( 15 )
nodes/fragment/5/position = Vector2( -180, 260 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 0, 2, 0, 4, 0, 4, 0, 5, 0, 5, 0, 3, 0 )

[sub_resource type="ShaderMaterial" id=17]
shader = SubResource( 16 )

[sub_resource type="PlaneMesh" id=18]

[sub_resource type="SpatialMaterial" id=19]
params_diffuse_mode = 1
params_specular_mode = 4
albedo_texture = ExtResource( 3 )
emission_enabled = true
emission = Color( 0, 0, 0, 1 )
emission_energy = 0.6
emission_operator = 0
emission_on_uv2 = false
emission_texture = ExtResource( 3 )
uv1_scale = Vector3( 8.868, 17.442, 1 )

[sub_resource type="ConcavePolygonShape" id=20]
data = PoolVector3Array( 1, 0, 1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0, -1, 1, 0, -1 )

[sub_resource type="GDScript" id=21]
script/source = "extends Area


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	connect(\"body_entered\",self,\"collided\")
func collided(body):
	if body.name==\"Player\":
		var f = File.new()
		f.open(\"res://biglandwell\",File.WRITE)
		f.close()
		get_tree().change_scene(\"res://bigland.tscn\")
		
"

[sub_resource type="GDScript" id=22]
script/source = "extends Area


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	connect(\"body_entered\",self,\"collided\")
func collided(body):
	if body.name==\"Player\":
		get_tree().change_scene(\"res://ship.tscn\")
		
"

[node name="apt" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
cast_shadow = 0
mesh = ExtResource( 1 )
material/0 = SubResource( 2 )

[node name="StaticBody" type="StaticBody" parent="MeshInstance"]

[node name="CollisionShape" type="CollisionShape" parent="MeshInstance/StaticBody"]
shape = SubResource( 3 )

[node name="CSGMesh" type="CSGMesh" parent="MeshInstance"]
transform = Transform( -4.37114e-08, 0, -1, 0, 2, 0, 1, 0, -4.37114e-08, 1.09867, 0.991375, 2.50439 )
mesh = SubResource( 4 )
material = SubResource( 10 )

[node name="CSGMesh3" type="CSGMesh" parent="MeshInstance"]
transform = Transform( -6.01469e-08, 0, -1, 0, 2, 0, 1.376, 0, -4.37114e-08, 1.09867, 0.991375, 0.000327826 )
mesh = SubResource( 4 )
material = SubResource( 10 )

[node name="StaticBody" type="StaticBody" parent="MeshInstance/CSGMesh3"]

[node name="CollisionShape2" type="CollisionShape" parent="MeshInstance/CSGMesh3/StaticBody"]
shape = SubResource( 11 )

[node name="CollisionShape3" type="CollisionShape" parent="MeshInstance/CSGMesh3/StaticBody"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.68776, 0, -1.19209e-07 )
shape = SubResource( 11 )

[node name="CollisionShape4" type="CollisionShape" parent="MeshInstance/CSGMesh3/StaticBody"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 3.26003, 0, -2.38419e-07 )
shape = SubResource( 11 )

[node name="CSGMesh2" type="CSGMesh" parent="MeshInstance"]
transform = Transform( -4.37114e-08, 0, -1, 0, 2, 0, 1, 0, -4.37114e-08, 1.00782, 0.991375, 4.51117 )
mesh = SubResource( 4 )
material = SubResource( 10 )

[node name="Spatial" type="Spatial" parent="."]

[node name="CSGMesh4" type="CSGMesh" parent="Spatial"]
transform = Transform( -0.863, 0, 1.50996e-07, 0, 1.47, 0, -1.30309e-07, 0, -1, -0.00246882, 0.719912, 5.96738 )
mesh = SubResource( 4 )
material = SubResource( 17 )

[node name="CSGMesh5" type="CSGMesh" parent="Spatial"]
transform = Transform( -0.863, 0, 1.50996e-07, 0, 1.47, 0, -1.30309e-07, 0, -1, -1.84766, 0.719912, 5.96738 )
mesh = SubResource( 4 )
material = SubResource( 17 )

[node name="Spatial2" type="Spatial" parent="."]
transform = Transform( -1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, -1.84761, 0, 2.99199 )

[node name="CSGMesh4" type="CSGMesh" parent="Spatial2"]
transform = Transform( -0.863, 0, 1.50996e-07, 0, 1.47, 0, -1.30309e-07, 0, -1, -0.00246882, 0.719912, 5.96738 )
mesh = SubResource( 4 )
material = SubResource( 17 )

[node name="CSGMesh5" type="CSGMesh" parent="Spatial2"]
transform = Transform( -0.863, 0, 1.50996e-07, 0, 1.47, 0, -1.30309e-07, 0, -1, -1.84766, 0.719912, 5.96738 )
mesh = SubResource( 4 )
material = SubResource( 17 )

[node name="MeshInstance6" type="MeshInstance" parent="Spatial2"]
transform = Transform( 681.358, 0, 0, 0, 1, 0, 0, 0, 1374.72, 8.54854, -0.0836232, 2.3768 )
mesh = SubResource( 18 )
material/0 = SubResource( 19 )

[node name="StaticBody" type="StaticBody" parent="Spatial2/MeshInstance6"]

[node name="CollisionShape" type="CollisionShape" parent="Spatial2/MeshInstance6/StaticBody"]
shape = SubResource( 20 )

[node name="Player" parent="." instance=ExtResource( 4 )]
transform = Transform( 0.4, 0, 0, 0, 0.4, 0, 0, 0, 0.4, 0, 0.483901, 5.48436 )

[node name="Area" type="Area" parent="."]
script = SubResource( 21 )

[node name="CollisionShape5" type="CollisionShape" parent="Area"]
transform = Transform( -6.01469e-08, 0, -1, 0, 2, 0, 1.376, 0, -4.37114e-08, 2.14006, 0.991375, -2.44756 )
shape = SubResource( 11 )

[node name="Area2" type="Area" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -6.25968, 0, 0 )
script = SubResource( 22 )

[node name="CollisionShape5" type="CollisionShape" parent="Area2"]
transform = Transform( -6.01469e-08, 0, -1, 0, 2, 0, 1.376, 0, -4.37114e-08, 2.14006, 0.991375, -2.44756 )
shape = SubResource( 11 )
